package com.hiidelas

import grails.plugin.springsecurity.annotation.Secured



import javax.validation.ValidationException


import com.hiideals.MembercreationService

import com.hiideals.io.Membercreation
import com.lowagie.text.*
import com.lowagie.text.pdf.*
import com.lowagie.text.Image
import java.io.ByteArrayOutputStream
import java.io.FileInputStream
import java.awt.Color
import java.nio.file.Files
import java.nio.file.Paths

import java.io.File
import com.springapp.Address
import com.springapp.Admin
import com.springapp.Images
import com.springapp.SecRole
import com.springapp.SecUser
import com.springapp.SecUserSecRole

class MembercreationController {
	MembercreationService membercreationService
	def userService

	
	
@Secured(["ROLE_SUPERADMIN","ROLE_ADMIN","ROLE_USER","ROLE_VCADMIN","ROLE_DUSER"])
def index() {
	
		def usersInstanceList = Membercreation.findAllByAdminId(userService.getCurrentAdmin());
		model:[usersInstanceList: usersInstanceList]
	}



@Secured(["ROLE_SUPERADMIN","ROLE_ADMIN","ROLE_USER","ROLE_VCADMIN","ROLE_DUSER"])
def createUser(){
		render(template:'userFORM')
	}

@Secured(["ROLE_SUPERADMIN","ROLE_ADMIN","ROLE_USER","ROLE_VCADMIN","ROLE_DUSER"])
	def saveUser() {
	println("save")
	def membercreation = new Membercreation(params)

	// Autogenerate membershipNo
	membercreation.membershipNo = membercreationService.generateMembershipNo()
	params.membershipNo = membercreation.membershipNo // Pass the membershipNo to params for display

	try {
		if (membercreation.save(flush: true)) {
			flash.message = "Member created successfully with Membership No: ${membercreation.membershipNo}"
			redirect(action: "index")
		} else {
			flash.message = "Failed to save member. Please correct the errors and try again."
			render(view: "create", model: [membercreation: membercreation])
		}
	} catch (Exception e) {
		log.error("Error saving member creation: ${e.message}", e)
		flash.message = "An unexpected error occurred. Please try again later."
		render(view: "create", model: [membercreation: membercreation])
	}
	
		def userexist = SecUser.findByUsername(params?.username)
		if (userexist) {
			flash.message = "This username Already Exists. Please use a different username."
			redirect(action: 'index')
		} else {
			def userInstance = new SecUser()
			def userRole = SecRole.findByAuthority('ROLE_VCADMIN')
			userInstance.properties = params
	
			// Define file path for images
			def stPath = grailsApplication.config.juserPhotos?.toString()
			userService.createImagePath(stPath)
			
	
			// Set up Membercreation instance with autogenerated membershipNo
			def admin = new Membercreation(params)
			admin.membershipNo = "MEM-" + System.currentTimeMillis() // Generate unique membershipNo
			params.membershipNo = admin.membershipNo // Pass it to the params for display in the form
	
			// Handle profile picture upload
			def file = request.getFile('file_1')
			if (file && file.getOriginalFilename()) {
				String s = stPath + file.getOriginalFilename()
				try {
					file.transferTo(new File(s))
				} catch (Exception e) {
					println("Error uploading file: ${e.message}")
				}
				Images image = new Images(name: file.getOriginalFilename(), imgpath: s).save(flush: true)
				userInstance.setProfilePic(image)
				admin.profilePic = image
			}
	
			// Save other properties for Membercreation
			admin.properties = params
			//Address address = new Address(params)
			//admin.setAddress(address.save(flush: true))
			admin.setAdminId(userService.getCurrentAdmin())
			userInstance.setAdminId(userService.getCurrentAdmin())
			userInstance.save(flush: true, failOnError: true)
			admin.setUserId(userInstance)
			userInstance.setVuserId(admin)
	
			// Save Membercreation with generated membershipNo
			admin.save(flush: true, failOnError: true)
			
			if (!userInstance.authorities.contains(userRole)) {
				new SecUserSecRole(userInstance, userRole).save(flush: true, failOnError: true)
			}
	
			flash.message = "Member Created Successfully with Membership No: ${admin.membershipNo}."
			redirect(action: 'index')
		}
	}
		
	@Secured(["ROLE_SUPERADMIN","ROLE_ADMIN","ROLE_USER","ROLE_VCADMIN","ROLE_DUSER"])
	def downloadCertificate() {
		ByteArrayOutputStream outputStream = new ByteArrayOutputStream()
		Document document = new Document(PageSize.A4.rotate())
	
		try {
			PdfWriter.getInstance(document, outputStream)
			document.open()
	
			// Background Image (Birthday Template)
			String imagePath = "./web-app/images/birthday.png"
			File imageFile = new File(imagePath)
	
			if (imageFile.exists()) {
				Image background = Image.getInstance(imagePath)
				background.scaleToFit(PageSize.A4.getWidth(), PageSize.A4.getHeight())
				background.setAbsolutePosition(0, 0) // Set background at (0,0)
				document.add(background)
			} else {
				document.add(new Paragraph("Background image not found: " + imagePath,
						FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD, Color.RED)))
			}
	
			// Fetch Member Details
			def member = Membercreation.get(params.id)
			if (!member) throw new Exception("Member not found")
	
			if (member?.profilePic) {  // Ensure member and profilePic exist
				if (member.profilePic.imgpath) {  // Use imgpath instead of imageData
					String profilePicPath = member.profilePic.imgpath
					File profilePicFile = new File(profilePicPath)
			
					if (profilePicFile.exists()) {
						try {
							Image profilePic = Image.getInstance(profilePicPath)
							
							profilePic.scaleToFit(100, 100)
			
							float centerX = (PageSize.A4.rotate().getWidth() - 100) / 3
							
							
							float centerY = (PageSize.A4.rotate().getHeight() - 100) / 3
							profilePic.setAbsolutePosition(centerX, centerY)
			
							document.add(profilePic)
						} catch (Exception e) {
							document.add(new Paragraph("\nError loading image from file"))
							log.error("Error loading image from file path: ", e)
						}
					} else {
						document.add(new Paragraph("\nProfile Picture Not Found"))
					}
				} else {
					document.add(new Paragraph("\nProfile Picture Not Available"))
				}
			} else {
				document.add(new Paragraph("\nMember profile not found"))
			}
			
			// Certificate Text
			Font titleFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 20, Color.BLUE)
			Font contentFont = FontFactory.getFont(FontFactory.HELVETICA, 14, Color.BLACK)
	
			document.add(new Paragraph("\nCertificate of Achievement", titleFont))
			document.add(new Paragraph("\nThis certificate is awarded to", contentFont))
			document.add(new Paragraph("\n${member.contactName}",
					FontFactory.getFont(FontFactory.HELVETICA_BOLD, 16, Color.DARK_GRAY)))
			document.add(new Paragraph("\nDate of Birth: ${member.dateOfBirth?.format('dd-MM-yyyy')}", contentFont))
	
			document.close()
	
			// Save PDF
			byte[] pdfBytes = outputStream.toByteArray()
			member.pdfData = pdfBytes
	
			String pdfFileName = "certificate_${member.membershipNo}.pdf"
			String savePath = "./uploadbirthdaycertificate/${pdfFileName}"
	
			File saveDir = new File("./uploadbirthdaycertificate/")
			if (!saveDir.exists()) saveDir.mkdirs()
	
			Files.write(Paths.get(savePath), pdfBytes)
           //member.birthdaypdfLink = "http://localhost:8080/publicCertificate/viewBirthdayCertificate?fileName=${pdfFileName}"
			//member.birthdaypdfLink = "http://localhost:8080/greetings/membercreation/viewCertificate?fileName=${pdfFileName}"

			
			member.birthdaypdfLink = "https://greetings.hiideals.com/greeting/membercreation/viewCertificate?fileName=${pdfFileName}"
			member.save(flush: true)
	
			response.contentType = "application/pdf"
			response.setHeader("Content-Disposition", "attachment; filename=${pdfFileName}")
			response.outputStream << pdfBytes
		} catch (Exception e) {
			response.status = 500
			render "Error generating PDF: ${e.message}"
		}
	}
	
	@Secured(['IS_AUTHENTICATED_ANONYMOUSLY'])
	def viewCertificate(String fileName) {
		if (!fileName) {
			render "Error: No file name provided!"
			return
		}

		String filePath = "./uploadbirthdaycertificate/${fileName}"
		File file = new File(filePath)

		if (file.exists()) {
			response.contentType = "application/pdf"
			response.setHeader("Content-Disposition", "inline; filename=${fileName}")
			response.outputStream << file.bytes
		} else {
			render "Error: File not found!"
		}
	}

	
	@Secured(["ROLE_SUPERADMIN","ROLE_ADMIN","ROLE_USER","ROLE_VCADMIN","ROLE_DUSER"])
	def downloadCertificate2() {
		ByteArrayOutputStream outputStream = new ByteArrayOutputStream()
		Document document = new Document(PageSize.A4.rotate()) // Landscape Mode
	
		try {
			PdfWriter.getInstance(document, outputStream)
			document.open()
			
			float pageWidth = PageSize.A4.rotate().getWidth()
			float pageHeight = PageSize.A4.rotate().getHeight()
	
			// Background Image
			String imagePath = "./web-app/images/anniversay.png"
			File imageFile = new File(imagePath)
	
			if (imageFile.exists()) {
				Image background = Image.getInstance(imagePath)
				background.scaleToFit(pageWidth, pageHeight) // Fit to full A4 landscape
				background.setAbsolutePosition(0f, 0f) // Align to top-left corner
				document.add(background)
			} else {
				document.add(new Paragraph("Background image not found: ${imagePath}",
					FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD, Color.RED)))
			}
	
			// Fetch Member Details
			def member = Membercreation.get(params.id)
			if (!member) throw new Exception("Member not found")
	
			// Profile Picture
			if (member?.profilePic?.imgpath) {
				String profilePicPath = member.profilePic.imgpath
				File profilePicFile = new File(profilePicPath)
	
				if (profilePicFile.exists()) {
					Image profilePic = Image.getInstance(profilePicPath)
					profilePic.scaleToFit(120, 120) // Resize profile image
					float centerX = (pageWidth - 120) / 3 as float // Center horizontally
					float centerY = (pageHeight - 120) / 3 as float // Center vertically
					profilePic.setAbsolutePosition(centerX, centerY)
					document.add(profilePic)
				} else {
					document.add(new Paragraph("\nProfile Picture Not Found"))
				}
			} else {
				document.add(new Paragraph("\nProfile Picture Not Available"))
			}
	
			// Certificate Text
			Font titleFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 20, Color.BLUE)
			Font contentFont = FontFactory.getFont(FontFactory.HELVETICA, 14, Color.BLACK)
	
			document.add(new Paragraph("\nCertificate of Achievement", titleFont))
			document.add(new Paragraph("\nThis certificate is awarded to", contentFont))
			document.add(new Paragraph("\n${member.contactName}",
					FontFactory.getFont(FontFactory.HELVETICA_BOLD, 16, Color.DARK_GRAY)))
			document.add(new Paragraph("\nDate of Anniversary: ${member.dateOfBirth?.format('dd-MM-yyyy')}", contentFont))
			
			document.close()
	
			// Save PDF
			byte[] pdfBytes = outputStream.toByteArray()
			member.pdfData = pdfBytes
	
			String pdfFileName = "certificate_${member.membershipNo}.pdf"
			String savePath = "./uploadanniversarycertificate/${pdfFileName}"
	
			File saveDir = new File("./uploadanniversarycertificate/")
			if (!saveDir.exists()) saveDir.mkdirs()
	
			Files.write(Paths.get(savePath), pdfBytes)

			//member.anniversarypdfLink = "http://localhost:8080/publicCertificate/viewAnniversaryCertificate?fileName=${pdfFileName}"
			//member.birthdaypdfLink = "http://localhost:8080/greetings/membercreation/viewCertificate2?fileName=${pdfFileName}"
			
			 member.anniversarypdfLink = "https://greetings.hiideals.com/greeting/membercreation/viewCertificate2?fileName=${pdfFileName}"
			member.save(flush: true)
			response.contentType = "application/pdf"
			response.setHeader("Content-Disposition", "attachment; filename=${pdfFileName}")
			response.outputStream << pdfBytes
		} catch (Exception e) {
			response.status = 500
			render "Error generating PDF: ${e.message}"
		}
	}
	
	@Secured(['IS_AUTHENTICATED_ANONYMOUSLY'])
	def viewCertificate2(String fileName) {
		if (!fileName) {
			render "Error: No file name provided!"
			return
		}

		String filePath = "./uploadanniversarycertificate/${fileName}"
		File file = new File(filePath)

		if (file.exists()) {
			response.contentType = "application/pdf"
			response.setHeader("Content-Disposition", "inline; filename=${fileName}")
			response.outputStream << file.bytes
		} else {
			render "Error: File not found!"
		}
	}	
	
	@Secured(["ROLE_SUPERADMIN","ROLE_ADMIN","ROLE_USER","ROLE_VCADMIN","ROLE_DUSER"])
	
	def userEdit(){
		def usersInstance=Membercreation.findById(params?.userListid)
		render(template:'userFORM',model:[usersInstance:usersInstance])
	}

	@Secured(["ROLE_SUPERADMIN","ROLE_ADMIN","ROLE_USER","ROLE_VCADMIN","ROLE_DUSER"])
	def viewimg() {
	Membercreation documentInstance = Membercreation.get(params.int('id'))
	if (documentInstance == null) {
		flash.message = "Image not found."
		redirect(action: 'index')
		return
	}

	
	def filePath = documentInstance.userId?.profilePic?.imgpath
	if (!filePath) {
		flash.message = "Image path not set."
		redirect(action: 'index')
		return
	}

	def file = new File(filePath)
	if (!file.exists()) {
		flash.message = "Image file does not exist."
		redirect(action: 'index')
		return
	}

	response.contentType = "image/jpeg" // Or use the actual MIME type if known
	def fileInputStream = new FileInputStream(file)
	def outputStream = response.getOutputStream()

	try {
		byte[] buffer = new byte[4096]
		int len
		while ((len = fileInputStream.read(buffer)) > 0) {
			outputStream.write(buffer, 0, len)
		}
	} catch (Exception e) {
		log.error("Error while streaming the image: ${e.message}", e)
	} finally {
		fileInputStream.close()
		outputStream.flush()
		outputStream.close()
	}
}

	@Secured(["ROLE_SUPERADMIN","ROLE_ADMIN","ROLE_USER","ROLE_VCADMIN","ROLE_DUSER"])
	def viewimg1(){
		
		Admin documentInstance = Admin.get(params.int('id'));
		if ( documentInstance == null) {
			flash.message = "image not found."
			redirect (action:'index')
		} else {
			def file = new File(documentInstance.profilePic.imgpath)
			def fileInputStream = new FileInputStream(file)
			def outputStream = response.getOutputStream()
			
			byte[] buffer = new byte[4096];
			int len;
			while ((len = fileInputStream.read(buffer)) > 0) {
				outputStream.write(buffer, 0, len);
			}
			outputStream.flush()
			outputStream.close()
			fileInputStream.close()
		}
	}
	
	@Secured(["ROLE_SUPERADMIN","ROLE_ADMIN","ROLE_USER","ROLE_VCADMIN","ROLE_DUSER"])
	def updateUser() {
	// Find the Membercreation instance by userListid
	def admin = Membercreation.findById(params?.userListid)
	if (!admin) {
		flash.message = "Member not found."
		redirect(action: 'index')
		return
	}

	// Find the SecUser instance associated with the Membercreation
	def userInstance = SecUser.findById(admin.userId?.id)
	if (!userInstance) {
		flash.message = "User not found."
		redirect(action: 'index')
		return
	}

	// Handle image upload
	def stPath = grailsApplication.config.juserPhotos // Define the image storage path
	if (!stPath) {
		log.error("Image path is not configured.")
		flash.message = "Image upload path is not set."
		redirect(action: 'index')
		return
	}

	userService.createImagePath(stPath) // Ensure the path exists

	def file = request.getFile('file_1') // Retrieve the uploaded file
	if (file?.originalFilename) {
		log.info("File received: ${file.originalFilename}")

		// Delete the old image file if it exists
		if (admin?.profilePic?.imgpath) {
			def oldFile = new File(admin.profilePic.imgpath)
			if (oldFile.exists()) {
				oldFile.delete()
				log.info("Deleted old image: ${oldFile}")
			}
		}

		// Save the new file
		def filePath = "${stPath}${file.getOriginalFilename()}"
		try {
			file.transferTo(new File(filePath)) // Save the file to the specified path
			log.info("File saved to: ${filePath}")

			// Create and save the image record
			def image = new Images(name: file.getOriginalFilename(), imgpath: filePath).save(flush: true)
			admin.setProfilePic(image) // Associate the new image with the admin
			log.info("Image linked to admin: ${image.id}")
		} catch (Exception e) {
			log.error("Error while saving image: ${e.message}", e)
			flash.message = "Failed to upload image."
		}
	} else {
		log.warn("No file uploaded.")
	}

	// Update Membercreation properties
	admin.properties = params
	if (!admin.save(flush: true)) {
		flash.message = "Failed to update Member details."
		render(view: 'edit', model: [admin: admin])
		return
	}

	// Update SecUser properties
	userInstance.username = params.username
	userInstance.password = params.password

	// Save SecUser instance
	try {
		userInstance.save(flush: true, failOnError: true)
		flash.message = "Member updated successfully."
	} catch (ValidationException e) {
		log.error("Error saving SecUser: ${e.message}", e)
		flash.message = "Failed to update user: ${e.message}"
		render(view: 'edit', model: [admin: admin, userInstance: userInstance])
		return
	}

	// Redirect to index
	redirect(action: 'index')
}



	def createce(){}
}


